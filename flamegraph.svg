<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="7164"><g><title>dyld`start (1 samples, 0.01%)</title><rect x="0.0000%" y="421" width="0.0140%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>chess_engine-0109c01217117341`main (1 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0140%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>chess_engine-0109c01217117341`std::rt::lang_start_internal (1 samples, 0.01%)</title><rect x="0.0000%" y="389" width="0.0140%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>chess_engine-0109c01217117341`std::rt::lang_start::_{{closure}} (1 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0140%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>chess_engine-0109c01217117341`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0140%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>chess_engine-0109c01217117341`test::test_main_static (1 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0140%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>chess_engine-0109c01217117341`test::test_main (1 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0140%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>chess_engine-0109c01217117341`test::console::run_tests_console (1 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0140%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>chess_engine-0109c01217117341`test::term::stdout (1 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0140%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0140%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::attack::generate_attack_board_for_color (2 samples, 0.03%)</title><rect x="0.0140%" y="213" width="0.0279%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.2640%" y="223.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_legal_moves (3 samples, 0.04%)</title><rect x="0.0140%" y="245" width="0.0419%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="3"/><text x="0.2640%" y="255.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_moves (3 samples, 0.04%)</title><rect x="0.0140%" y="229" width="0.0419%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="3"/><text x="0.2640%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="0.0419%" y="213" width="0.0140%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.2919%" y="223.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::board::Board::make (1 samples, 0.01%)</title><rect x="0.0698%" y="229" width="0.0140%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="0.3198%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.04%)</title><rect x="0.1815%" y="133" width="0.0419%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="3"/><text x="0.4315%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="0.1815%" y="117" width="0.0419%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="3"/><text x="0.4315%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="0.1954%" y="101" width="0.0279%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="2"/><text x="0.4454%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="0.2094%" y="85" width="0.0140%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="1"/><text x="0.4594%" y="95.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.06%)</title><rect x="0.1815%" y="197" width="0.0558%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="4"/><text x="0.4315%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::finish_grow (4 samples, 0.06%)</title><rect x="0.1815%" y="181" width="0.0558%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="4"/><text x="0.4315%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.06%)</title><rect x="0.1815%" y="165" width="0.0558%" height="15" fill="rgb(235,183,28)" fg:x="13" fg:w="4"/><text x="0.4315%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.06%)</title><rect x="0.1815%" y="149" width="0.0558%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="4"/><text x="0.4315%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="0.2233%" y="133" width="0.0140%" height="15" fill="rgb(247,18,42)" fg:x="16" fg:w="1"/><text x="0.4733%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.01%)</title><rect x="0.2233%" y="117" width="0.0140%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="1"/><text x="0.4733%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="0.2233%" y="101" width="0.0140%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="1"/><text x="0.4733%" y="111.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::attack::generate_attack_board_for_color (15 samples, 0.21%)</title><rect x="0.2373%" y="197" width="0.2094%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="15"/><text x="0.4873%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_legal_moves (29 samples, 0.40%)</title><rect x="0.0838%" y="229" width="0.4048%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="29"/><text x="0.3338%" y="239.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_moves (29 samples, 0.40%)</title><rect x="0.0838%" y="213" width="0.4048%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="29"/><text x="0.3338%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.04%)</title><rect x="0.4467%" y="197" width="0.0419%" height="15" fill="rgb(232,36,49)" fg:x="32" fg:w="3"/><text x="0.6967%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="0.5165%" y="213" width="0.0140%" height="15" fill="rgb(209,103,24)" fg:x="37" fg:w="1"/><text x="0.7665%" y="223.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::board::Board::make (7 samples, 0.10%)</title><rect x="0.5304%" y="213" width="0.0977%" height="15" fill="rgb(229,88,8)" fg:x="38" fg:w="7"/><text x="0.7804%" y="223.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::board::Board::undo (1 samples, 0.01%)</title><rect x="0.6281%" y="213" width="0.0140%" height="15" fill="rgb(213,181,19)" fg:x="45" fg:w="1"/><text x="0.8781%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.01%)</title><rect x="0.8096%" y="149" width="0.0140%" height="15" fill="rgb(254,191,54)" fg:x="58" fg:w="1"/><text x="1.0596%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="0.8515%" y="133" width="0.0140%" height="15" fill="rgb(241,83,37)" fg:x="61" fg:w="1"/><text x="1.1015%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="0.8515%" y="117" width="0.0140%" height="15" fill="rgb(233,36,39)" fg:x="61" fg:w="1"/><text x="1.1015%" y="127.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::finish_grow (5 samples, 0.07%)</title><rect x="0.8096%" y="181" width="0.0698%" height="15" fill="rgb(226,3,54)" fg:x="58" fg:w="5"/><text x="1.0596%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.07%)</title><rect x="0.8096%" y="165" width="0.0698%" height="15" fill="rgb(245,192,40)" fg:x="58" fg:w="5"/><text x="1.0596%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.06%)</title><rect x="0.8236%" y="149" width="0.0558%" height="15" fill="rgb(238,167,29)" fg:x="59" fg:w="4"/><text x="1.0736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="0.8654%" y="133" width="0.0140%" height="15" fill="rgb(232,182,51)" fg:x="62" fg:w="1"/><text x="1.1154%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="0.8654%" y="117" width="0.0140%" height="15" fill="rgb(231,60,39)" fg:x="62" fg:w="1"/><text x="1.1154%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="0.8654%" y="101" width="0.0140%" height="15" fill="rgb(208,69,12)" fg:x="62" fg:w="1"/><text x="1.1154%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="0.8654%" y="85" width="0.0140%" height="15" fill="rgb(235,93,37)" fg:x="62" fg:w="1"/><text x="1.1154%" y="95.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.08%)</title><rect x="0.8096%" y="197" width="0.0838%" height="15" fill="rgb(213,116,39)" fg:x="58" fg:w="6"/><text x="1.0596%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="0.8794%" y="181" width="0.0140%" height="15" fill="rgb(222,207,29)" fg:x="63" fg:w="1"/><text x="1.1294%" y="191.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::board::Board::make (5 samples, 0.07%)</title><rect x="0.8934%" y="197" width="0.0698%" height="15" fill="rgb(206,96,30)" fg:x="64" fg:w="5"/><text x="1.1434%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`DYLD-STUB$$memcpy (6 samples, 0.08%)</title><rect x="2.5544%" y="181" width="0.0838%" height="15" fill="rgb(218,138,4)" fg:x="183" fg:w="6"/><text x="2.8044%" y="191.50"></text></g><g><title>chess_engine-0109c01217117341`__rdl_realloc (2 samples, 0.03%)</title><rect x="2.6801%" y="165" width="0.0279%" height="15" fill="rgb(250,191,14)" fg:x="192" fg:w="2"/><text x="2.9301%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="2.7359%" y="149" width="0.0140%" height="15" fill="rgb(239,60,40)" fg:x="196" fg:w="1"/><text x="2.9859%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="2.8336%" y="117" width="0.0140%" height="15" fill="rgb(206,27,48)" fg:x="203" fg:w="1"/><text x="3.0836%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="2.8476%" y="117" width="0.0140%" height="15" fill="rgb(225,35,8)" fg:x="204" fg:w="1"/><text x="3.0976%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.06%)</title><rect x="2.8615%" y="101" width="0.0558%" height="15" fill="rgb(250,213,24)" fg:x="205" fg:w="4"/><text x="3.1115%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="2.9174%" y="85" width="0.0279%" height="15" fill="rgb(247,123,22)" fg:x="209" fg:w="2"/><text x="3.1674%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.03%)</title><rect x="2.9732%" y="69" width="0.0279%" height="15" fill="rgb(231,138,38)" fg:x="213" fg:w="2"/><text x="3.2232%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.17%)</title><rect x="2.8615%" y="117" width="0.1675%" height="15" fill="rgb(231,145,46)" fg:x="205" fg:w="12"/><text x="3.1115%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.11%)</title><rect x="2.9174%" y="101" width="0.1117%" height="15" fill="rgb(251,118,11)" fg:x="209" fg:w="8"/><text x="3.1674%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.08%)</title><rect x="2.9453%" y="85" width="0.0838%" height="15" fill="rgb(217,147,25)" fg:x="211" fg:w="6"/><text x="3.1953%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="3.0011%" y="69" width="0.0279%" height="15" fill="rgb(247,81,37)" fg:x="215" fg:w="2"/><text x="3.2511%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.01%)</title><rect x="3.0290%" y="117" width="0.0140%" height="15" fill="rgb(209,12,38)" fg:x="217" fg:w="1"/><text x="3.2790%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="3.0849%" y="101" width="0.0140%" height="15" fill="rgb(227,1,9)" fg:x="221" fg:w="1"/><text x="3.3349%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.01%)</title><rect x="3.1686%" y="85" width="0.0140%" height="15" fill="rgb(248,47,43)" fg:x="227" fg:w="1"/><text x="3.4186%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.13%)</title><rect x="3.0988%" y="101" width="0.1256%" height="15" fill="rgb(221,10,30)" fg:x="222" fg:w="9"/><text x="3.3488%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.04%)</title><rect x="3.1826%" y="85" width="0.0419%" height="15" fill="rgb(210,229,1)" fg:x="228" fg:w="3"/><text x="3.4326%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="3.2245%" y="101" width="0.0140%" height="15" fill="rgb(222,148,37)" fg:x="231" fg:w="1"/><text x="3.4745%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="3.2384%" y="101" width="0.0279%" height="15" fill="rgb(234,67,33)" fg:x="232" fg:w="2"/><text x="3.4884%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.03%)</title><rect x="3.2663%" y="101" width="0.0279%" height="15" fill="rgb(247,98,35)" fg:x="234" fg:w="2"/><text x="3.5163%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.03%)</title><rect x="3.2663%" y="85" width="0.0279%" height="15" fill="rgb(247,138,52)" fg:x="234" fg:w="2"/><text x="3.5163%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (21 samples, 0.29%)</title><rect x="3.0430%" y="117" width="0.2931%" height="15" fill="rgb(213,79,30)" fg:x="218" fg:w="21"/><text x="3.2930%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (3 samples, 0.04%)</title><rect x="3.2942%" y="101" width="0.0419%" height="15" fill="rgb(246,177,23)" fg:x="236" fg:w="3"/><text x="3.5442%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="3.3222%" y="85" width="0.0140%" height="15" fill="rgb(230,62,27)" fg:x="238" fg:w="1"/><text x="3.5722%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (48 samples, 0.67%)</title><rect x="2.8057%" y="133" width="0.6700%" height="15" fill="rgb(216,154,8)" fg:x="201" fg:w="48"/><text x="3.0557%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.14%)</title><rect x="3.3361%" y="117" width="0.1396%" height="15" fill="rgb(244,35,45)" fg:x="239" fg:w="10"/><text x="3.5861%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="3.4757%" y="133" width="0.0140%" height="15" fill="rgb(251,115,12)" fg:x="249" fg:w="1"/><text x="3.7257%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (56 samples, 0.78%)</title><rect x="2.7499%" y="149" width="0.7817%" height="15" fill="rgb(240,54,50)" fg:x="197" fg:w="56"/><text x="2.9999%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.04%)</title><rect x="3.4897%" y="133" width="0.0419%" height="15" fill="rgb(233,84,52)" fg:x="250" fg:w="3"/><text x="3.7397%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.04%)</title><rect x="3.4897%" y="117" width="0.0419%" height="15" fill="rgb(207,117,47)" fg:x="250" fg:w="3"/><text x="3.7397%" y="127.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::finish_grow (60 samples, 0.84%)</title><rect x="2.7080%" y="165" width="0.8375%" height="15" fill="rgb(249,43,39)" fg:x="194" fg:w="60"/><text x="2.9580%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="3.5315%" y="149" width="0.0140%" height="15" fill="rgb(209,38,44)" fg:x="253" fg:w="1"/><text x="3.7815%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="3.5455%" y="165" width="0.0140%" height="15" fill="rgb(236,212,23)" fg:x="254" fg:w="1"/><text x="3.7955%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="3.5595%" y="165" width="0.0140%" height="15" fill="rgb(242,79,21)" fg:x="255" fg:w="1"/><text x="3.8095%" y="175.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (69 samples, 0.96%)</title><rect x="2.6382%" y="181" width="0.9631%" height="15" fill="rgb(211,96,35)" fg:x="189" fg:w="69"/><text x="2.8882%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.03%)</title><rect x="3.5734%" y="165" width="0.0279%" height="15" fill="rgb(253,215,40)" fg:x="256" fg:w="2"/><text x="3.8234%" y="175.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::finish_grow (3 samples, 0.04%)</title><rect x="3.6013%" y="181" width="0.0419%" height="15" fill="rgb(211,81,21)" fg:x="258" fg:w="3"/><text x="3.8513%" y="191.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::attack::generate_attack_board_for_color (232 samples, 3.24%)</title><rect x="3.6432%" y="181" width="3.2384%" height="15" fill="rgb(208,190,38)" fg:x="261" fg:w="232"/><text x="3.8932%" y="191.50">che..</text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_moves (519 samples, 7.24%)</title><rect x="0.9631%" y="197" width="7.2446%" height="15" fill="rgb(235,213,38)" fg:x="69" fg:w="519"/><text x="1.2131%" y="207.50">chess_engi..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (95 samples, 1.33%)</title><rect x="6.8816%" y="181" width="1.3261%" height="15" fill="rgb(237,122,38)" fg:x="493" fg:w="95"/><text x="7.1316%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="8.2077%" y="197" width="0.0140%" height="15" fill="rgb(244,218,35)" fg:x="588" fg:w="1"/><text x="8.4577%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_legal_moves (546 samples, 7.62%)</title><rect x="0.6421%" y="213" width="7.6214%" height="15" fill="rgb(240,68,47)" fg:x="46" fg:w="546"/><text x="0.8921%" y="223.50">chess_engi..</text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.04%)</title><rect x="8.2217%" y="197" width="0.0419%" height="15" fill="rgb(210,16,53)" fg:x="589" fg:w="3"/><text x="8.4717%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_moves (2 samples, 0.03%)</title><rect x="8.2635%" y="213" width="0.0279%" height="15" fill="rgb(235,124,12)" fg:x="592" fg:w="2"/><text x="8.5135%" y="223.50"></text></g><g><title>chess_engine-0109c01217117341`DYLD-STUB$$free (2 samples, 0.03%)</title><rect x="8.4310%" y="197" width="0.0279%" height="15" fill="rgb(224,169,11)" fg:x="604" fg:w="2"/><text x="8.6810%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.03%)</title><rect x="8.4590%" y="197" width="0.0279%" height="15" fill="rgb(250,166,2)" fg:x="606" fg:w="2"/><text x="8.7090%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::board::Board::make (27 samples, 0.38%)</title><rect x="8.4869%" y="197" width="0.3769%" height="15" fill="rgb(242,216,29)" fg:x="608" fg:w="27"/><text x="8.7369%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::board::Board::undo (18 samples, 0.25%)</title><rect x="8.8638%" y="197" width="0.2513%" height="15" fill="rgb(230,116,27)" fg:x="635" fg:w="18"/><text x="9.1138%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`__rdl_alloc (1 samples, 0.01%)</title><rect x="10.3294%" y="165" width="0.0140%" height="15" fill="rgb(228,99,48)" fg:x="740" fg:w="1"/><text x="10.5794%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="10.3434%" y="149" width="0.0140%" height="15" fill="rgb(253,11,6)" fg:x="741" fg:w="1"/><text x="10.5934%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.04%)</title><rect x="10.4271%" y="101" width="0.0419%" height="15" fill="rgb(247,143,39)" fg:x="747" fg:w="3"/><text x="10.6771%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.11%)</title><rect x="10.3992%" y="117" width="0.1117%" height="15" fill="rgb(236,97,10)" fg:x="745" fg:w="8"/><text x="10.6492%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="10.4690%" y="101" width="0.0419%" height="15" fill="rgb(233,208,19)" fg:x="750" fg:w="3"/><text x="10.7190%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="10.4690%" y="85" width="0.0419%" height="15" fill="rgb(216,164,2)" fg:x="750" fg:w="3"/><text x="10.7190%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.03%)</title><rect x="10.5109%" y="117" width="0.0279%" height="15" fill="rgb(220,129,5)" fg:x="753" fg:w="2"/><text x="10.7609%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="10.5388%" y="117" width="0.0140%" height="15" fill="rgb(242,17,10)" fg:x="755" fg:w="1"/><text x="10.7888%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.04%)</title><rect x="10.5807%" y="101" width="0.0419%" height="15" fill="rgb(242,107,0)" fg:x="758" fg:w="3"/><text x="10.8307%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.04%)</title><rect x="10.5807%" y="85" width="0.0419%" height="15" fill="rgb(251,28,31)" fg:x="758" fg:w="3"/><text x="10.8307%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="10.6086%" y="69" width="0.0140%" height="15" fill="rgb(233,223,10)" fg:x="760" fg:w="1"/><text x="10.8586%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="10.6226%" y="101" width="0.0419%" height="15" fill="rgb(215,21,27)" fg:x="761" fg:w="3"/><text x="10.8726%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.04%)</title><rect x="10.6226%" y="85" width="0.0419%" height="15" fill="rgb(232,23,21)" fg:x="761" fg:w="3"/><text x="10.8726%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.03%)</title><rect x="10.6365%" y="69" width="0.0279%" height="15" fill="rgb(244,5,23)" fg:x="762" fg:w="2"/><text x="10.8865%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.03%)</title><rect x="10.6365%" y="53" width="0.0279%" height="15" fill="rgb(226,81,46)" fg:x="762" fg:w="2"/><text x="10.8865%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="10.6644%" y="101" width="0.0140%" height="15" fill="rgb(247,70,30)" fg:x="764" fg:w="1"/><text x="10.9144%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.01%)</title><rect x="10.6644%" y="85" width="0.0140%" height="15" fill="rgb(212,68,19)" fg:x="764" fg:w="1"/><text x="10.9144%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.01%)</title><rect x="10.6784%" y="101" width="0.0140%" height="15" fill="rgb(240,187,13)" fg:x="765" fg:w="1"/><text x="10.9284%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="10.6784%" y="85" width="0.0140%" height="15" fill="rgb(223,113,26)" fg:x="765" fg:w="1"/><text x="10.9284%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.15%)</title><rect x="10.5528%" y="117" width="0.1535%" height="15" fill="rgb(206,192,2)" fg:x="756" fg:w="11"/><text x="10.8028%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="10.6924%" y="101" width="0.0140%" height="15" fill="rgb(241,108,4)" fg:x="766" fg:w="1"/><text x="10.9424%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.34%)</title><rect x="10.3853%" y="133" width="0.3350%" height="15" fill="rgb(247,173,49)" fg:x="744" fg:w="24"/><text x="10.6353%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="10.7063%" y="117" width="0.0140%" height="15" fill="rgb(224,114,35)" fg:x="767" fg:w="1"/><text x="10.9563%" y="127.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (41 samples, 0.57%)</title><rect x="10.1619%" y="181" width="0.5723%" height="15" fill="rgb(245,159,27)" fg:x="728" fg:w="41"/><text x="10.4119%" y="191.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::finish_grow (28 samples, 0.39%)</title><rect x="10.3434%" y="165" width="0.3908%" height="15" fill="rgb(245,172,44)" fg:x="741" fg:w="28"/><text x="10.5934%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (27 samples, 0.38%)</title><rect x="10.3573%" y="149" width="0.3769%" height="15" fill="rgb(236,23,11)" fg:x="742" fg:w="27"/><text x="10.6073%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="10.7203%" y="133" width="0.0140%" height="15" fill="rgb(205,117,38)" fg:x="768" fg:w="1"/><text x="10.9703%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.01%)</title><rect x="10.7203%" y="117" width="0.0140%" height="15" fill="rgb(237,72,25)" fg:x="768" fg:w="1"/><text x="10.9703%" y="127.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="10.7342%" y="181" width="0.0140%" height="15" fill="rgb(244,70,9)" fg:x="769" fg:w="1"/><text x="10.9842%" y="191.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::board::Board::make (35 samples, 0.49%)</title><rect x="10.7482%" y="181" width="0.4886%" height="15" fill="rgb(217,125,39)" fg:x="770" fg:w="35"/><text x="10.9982%" y="191.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::board::Board::undo (6 samples, 0.08%)</title><rect x="11.2367%" y="181" width="0.0838%" height="15" fill="rgb(235,36,10)" fg:x="805" fg:w="6"/><text x="11.4867%" y="191.50"></text></g><g><title>chess_engine-0109c01217117341`DYLD-STUB$$memcpy (46 samples, 0.64%)</title><rect x="30.1089%" y="165" width="0.6421%" height="15" fill="rgb(251,123,47)" fg:x="2157" fg:w="46"/><text x="30.3589%" y="175.50"></text></g><g><title>chess_engine-0109c01217117341`DYLD-STUB$$malloc (3 samples, 0.04%)</title><rect x="31.0302%" y="149" width="0.0419%" height="15" fill="rgb(221,13,13)" fg:x="2223" fg:w="3"/><text x="31.2802%" y="159.50"></text></g><g><title>chess_engine-0109c01217117341`DYLD-STUB$$realloc (10 samples, 0.14%)</title><rect x="31.0720%" y="149" width="0.1396%" height="15" fill="rgb(238,131,9)" fg:x="2226" fg:w="10"/><text x="31.3220%" y="159.50"></text></g><g><title>chess_engine-0109c01217117341`__rdl_alloc (1 samples, 0.01%)</title><rect x="31.2116%" y="149" width="0.0140%" height="15" fill="rgb(211,50,8)" fg:x="2236" fg:w="1"/><text x="31.4616%" y="159.50"></text></g><g><title>chess_engine-0109c01217117341`__rdl_realloc (8 samples, 0.11%)</title><rect x="31.2256%" y="149" width="0.1117%" height="15" fill="rgb(245,182,24)" fg:x="2237" fg:w="8"/><text x="31.4756%" y="159.50"></text></g><g><title>chess_engine-0109c01217117341`__rdl_realloc (1 samples, 0.01%)</title><rect x="31.6304%" y="133" width="0.0140%" height="15" fill="rgb(242,14,37)" fg:x="2266" fg:w="1"/><text x="31.8804%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.07%)</title><rect x="31.6443%" y="133" width="0.0698%" height="15" fill="rgb(246,228,12)" fg:x="2267" fg:w="5"/><text x="31.8943%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.18%)</title><rect x="31.7141%" y="133" width="0.1815%" height="15" fill="rgb(213,55,15)" fg:x="2272" fg:w="13"/><text x="31.9641%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (17 samples, 0.24%)</title><rect x="32.5098%" y="117" width="0.2373%" height="15" fill="rgb(209,9,3)" fg:x="2329" fg:w="17"/><text x="32.7598%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (6 samples, 0.08%)</title><rect x="33.2356%" y="101" width="0.0838%" height="15" fill="rgb(230,59,30)" fg:x="2381" fg:w="6"/><text x="33.4856%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="33.3194%" y="101" width="0.0279%" height="15" fill="rgb(209,121,21)" fg:x="2387" fg:w="2"/><text x="33.5694%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.07%)</title><rect x="33.3473%" y="101" width="0.0698%" height="15" fill="rgb(220,109,13)" fg:x="2389" fg:w="5"/><text x="33.5973%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.22%)</title><rect x="33.4171%" y="101" width="0.2233%" height="15" fill="rgb(232,18,1)" fg:x="2394" fg:w="16"/><text x="33.6671%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.03%)</title><rect x="33.7661%" y="85" width="0.0279%" height="15" fill="rgb(215,41,42)" fg:x="2419" fg:w="2"/><text x="34.0161%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (28 samples, 0.39%)</title><rect x="33.7940%" y="85" width="0.3908%" height="15" fill="rgb(224,123,36)" fg:x="2421" fg:w="28"/><text x="34.0440%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="34.2267%" y="69" width="0.0419%" height="15" fill="rgb(240,125,3)" fg:x="2452" fg:w="3"/><text x="34.4767%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.03%)</title><rect x="34.5338%" y="53" width="0.0279%" height="15" fill="rgb(205,98,50)" fg:x="2474" fg:w="2"/><text x="34.7838%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (21 samples, 0.29%)</title><rect x="34.5617%" y="53" width="0.2931%" height="15" fill="rgb(205,185,37)" fg:x="2476" fg:w="21"/><text x="34.8117%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (8 samples, 0.11%)</title><rect x="35.3992%" y="37" width="0.1117%" height="15" fill="rgb(238,207,15)" fg:x="2536" fg:w="8"/><text x="35.6492%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (98 samples, 1.37%)</title><rect x="34.1848%" y="85" width="1.3680%" height="15" fill="rgb(213,199,42)" fg:x="2449" fg:w="98"/><text x="34.4348%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (92 samples, 1.28%)</title><rect x="34.2686%" y="69" width="1.2842%" height="15" fill="rgb(235,201,11)" fg:x="2455" fg:w="92"/><text x="34.5186%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (50 samples, 0.70%)</title><rect x="34.8548%" y="53" width="0.6979%" height="15" fill="rgb(207,46,11)" fg:x="2497" fg:w="50"/><text x="35.1048%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.04%)</title><rect x="35.5109%" y="37" width="0.0419%" height="15" fill="rgb(241,35,35)" fg:x="2544" fg:w="3"/><text x="35.7609%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="35.5528%" y="85" width="0.0140%" height="15" fill="rgb(243,32,47)" fg:x="2547" fg:w="1"/><text x="35.8028%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (140 samples, 1.95%)</title><rect x="33.6404%" y="101" width="1.9542%" height="15" fill="rgb(247,202,23)" fg:x="2410" fg:w="140"/><text x="33.8904%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.03%)</title><rect x="35.5667%" y="85" width="0.0279%" height="15" fill="rgb(219,102,11)" fg:x="2548" fg:w="2"/><text x="35.8167%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (9 samples, 0.13%)</title><rect x="35.5946%" y="101" width="0.1256%" height="15" fill="rgb(243,110,44)" fg:x="2550" fg:w="9"/><text x="35.8446%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.10%)</title><rect x="35.7203%" y="101" width="0.0977%" height="15" fill="rgb(222,74,54)" fg:x="2559" fg:w="7"/><text x="35.9703%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (13 samples, 0.18%)</title><rect x="36.2367%" y="85" width="0.1815%" height="15" fill="rgb(216,99,12)" fg:x="2596" fg:w="13"/><text x="36.4867%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.04%)</title><rect x="36.4182%" y="85" width="0.0419%" height="15" fill="rgb(226,22,26)" fg:x="2609" fg:w="3"/><text x="36.6682%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="36.4601%" y="85" width="0.0140%" height="15" fill="rgb(217,163,10)" fg:x="2612" fg:w="1"/><text x="36.7101%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (6 samples, 0.08%)</title><rect x="37.0045%" y="69" width="0.0838%" height="15" fill="rgb(213,25,53)" fg:x="2651" fg:w="6"/><text x="37.2545%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.14%)</title><rect x="37.7164%" y="53" width="0.1396%" height="15" fill="rgb(252,105,26)" fg:x="2702" fg:w="10"/><text x="37.9664%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (101 samples, 1.41%)</title><rect x="36.4740%" y="85" width="1.4098%" height="15" fill="rgb(220,39,43)" fg:x="2613" fg:w="101"/><text x="36.7240%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (57 samples, 0.80%)</title><rect x="37.0882%" y="69" width="0.7956%" height="15" fill="rgb(229,68,48)" fg:x="2657" fg:w="57"/><text x="37.3382%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="37.8559%" y="53" width="0.0279%" height="15" fill="rgb(252,8,32)" fg:x="2712" fg:w="2"/><text x="38.1059%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (26 samples, 0.36%)</title><rect x="37.8839%" y="85" width="0.3629%" height="15" fill="rgb(223,20,43)" fg:x="2714" fg:w="26"/><text x="38.1339%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.03%)</title><rect x="38.2468%" y="85" width="0.0279%" height="15" fill="rgb(229,81,49)" fg:x="2740" fg:w="2"/><text x="38.4968%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.01%)</title><rect x="38.2747%" y="85" width="0.0140%" height="15" fill="rgb(236,28,36)" fg:x="2742" fg:w="1"/><text x="38.5247%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="38.6237%" y="37" width="0.0140%" height="15" fill="rgb(249,185,26)" fg:x="2767" fg:w="1"/><text x="38.8737%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.39%)</title><rect x="38.2887%" y="85" width="0.3908%" height="15" fill="rgb(249,174,33)" fg:x="2743" fg:w="28"/><text x="38.5387%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (27 samples, 0.38%)</title><rect x="38.3026%" y="69" width="0.3769%" height="15" fill="rgb(233,201,37)" fg:x="2744" fg:w="27"/><text x="38.5526%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.07%)</title><rect x="38.6097%" y="53" width="0.0698%" height="15" fill="rgb(221,78,26)" fg:x="2766" fg:w="5"/><text x="38.8597%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.04%)</title><rect x="38.6376%" y="37" width="0.0419%" height="15" fill="rgb(250,127,30)" fg:x="2768" fg:w="3"/><text x="38.8876%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (41 samples, 0.57%)</title><rect x="38.6795%" y="85" width="0.5723%" height="15" fill="rgb(230,49,44)" fg:x="2771" fg:w="41"/><text x="38.9295%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.49%)</title><rect x="38.7633%" y="69" width="0.4886%" height="15" fill="rgb(229,67,23)" fg:x="2777" fg:w="35"/><text x="39.0133%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.06%)</title><rect x="39.2518%" y="85" width="0.0558%" height="15" fill="rgb(249,83,47)" fg:x="2812" fg:w="4"/><text x="39.5018%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (7 samples, 0.10%)</title><rect x="39.7962%" y="69" width="0.0977%" height="15" fill="rgb(215,43,3)" fg:x="2851" fg:w="7"/><text x="40.0462%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.10%)</title><rect x="39.8939%" y="69" width="0.0977%" height="15" fill="rgb(238,154,13)" fg:x="2858" fg:w="7"/><text x="40.1439%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (66 samples, 0.92%)</title><rect x="39.3076%" y="85" width="0.9213%" height="15" fill="rgb(219,56,2)" fg:x="2816" fg:w="66"/><text x="39.5576%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.24%)</title><rect x="39.9916%" y="69" width="0.2373%" height="15" fill="rgb(233,0,4)" fg:x="2865" fg:w="17"/><text x="40.2416%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (333 samples, 4.65%)</title><rect x="35.8180%" y="101" width="4.6482%" height="15" fill="rgb(235,30,7)" fg:x="2566" fg:w="333"/><text x="36.0680%" y="111.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.24%)</title><rect x="40.2289%" y="85" width="0.2373%" height="15" fill="rgb(250,79,13)" fg:x="2882" fg:w="17"/><text x="40.4789%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.14%)</title><rect x="40.4662%" y="101" width="0.1396%" height="15" fill="rgb(211,146,34)" fg:x="2899" fg:w="10"/><text x="40.7162%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.03%)</title><rect x="40.6058%" y="101" width="0.0279%" height="15" fill="rgb(228,22,38)" fg:x="2909" fg:w="2"/><text x="40.8558%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (627 samples, 8.75%)</title><rect x="32.7471%" y="117" width="8.7521%" height="15" fill="rgb(235,168,5)" fg:x="2346" fg:w="627"/><text x="32.9971%" y="127.50">libsystem_ma..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (62 samples, 0.87%)</title><rect x="40.6337%" y="101" width="0.8654%" height="15" fill="rgb(221,155,16)" fg:x="2911" fg:w="62"/><text x="40.8837%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (18 samples, 0.25%)</title><rect x="41.4992%" y="117" width="0.2513%" height="15" fill="rgb(215,215,53)" fg:x="2973" fg:w="18"/><text x="41.7492%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.14%)</title><rect x="41.7504%" y="117" width="0.1396%" height="15" fill="rgb(223,4,10)" fg:x="2991" fg:w="10"/><text x="42.0004%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (753 samples, 10.51%)</title><rect x="31.8956%" y="133" width="10.5109%" height="15" fill="rgb(234,103,6)" fg:x="2285" fg:w="753"/><text x="32.1456%" y="143.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`szone_size (37 samples, 0.52%)</title><rect x="41.8900%" y="117" width="0.5165%" height="15" fill="rgb(227,97,0)" fg:x="3001" fg:w="37"/><text x="42.1400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (33 samples, 0.46%)</title><rect x="41.9458%" y="101" width="0.4606%" height="15" fill="rgb(234,150,53)" fg:x="3005" fg:w="33"/><text x="42.1958%" y="111.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::finish_grow (797 samples, 11.13%)</title><rect x="31.3372%" y="149" width="11.1251%" height="15" fill="rgb(228,201,54)" fg:x="2245" fg:w="797"/><text x="31.5872%" y="159.50">chess_engine-010..</text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.06%)</title><rect x="42.4065%" y="133" width="0.0558%" height="15" fill="rgb(222,22,37)" fg:x="3038" fg:w="4"/><text x="42.6565%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.20%)</title><rect x="42.4623%" y="149" width="0.1954%" height="15" fill="rgb(237,53,32)" fg:x="3042" fg:w="14"/><text x="42.7123%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.27%)</title><rect x="42.6577%" y="149" width="0.2652%" height="15" fill="rgb(233,25,53)" fg:x="3056" fg:w="19"/><text x="42.9077%" y="159.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (883 samples, 12.33%)</title><rect x="30.7510%" y="165" width="12.3255%" height="15" fill="rgb(210,40,34)" fg:x="2203" fg:w="883"/><text x="31.0010%" y="175.50">chess_engine-0109c..</text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.15%)</title><rect x="42.9229%" y="149" width="0.1535%" height="15" fill="rgb(241,220,44)" fg:x="3075" fg:w="11"/><text x="43.1729%" y="159.50"></text></g><g><title>chess_engine-0109c01217117341`alloc::raw_vec::finish_grow (18 samples, 0.25%)</title><rect x="43.0765%" y="165" width="0.2513%" height="15" fill="rgb(235,28,35)" fg:x="3086" fg:w="18"/><text x="43.3265%" y="175.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::attack::generate_attack_board_for_color (2,775 samples, 38.74%)</title><rect x="43.3277%" y="165" width="38.7353%" height="15" fill="rgb(210,56,17)" fg:x="3104" fg:w="2775"/><text x="43.5777%" y="175.50">chess_engine-0109c01217117341`chess_engine::attack::generate_at..</text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_moves (6,276 samples, 87.60%)</title><rect x="11.3205%" y="181" width="87.6047%" height="15" fill="rgb(224,130,29)" fg:x="811" fg:w="6276"/><text x="11.5705%" y="191.50">chess_engine-0109c01217117341`chess_engine::chess_move::generate_moves</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,208 samples, 16.86%)</title><rect x="82.0631%" y="165" width="16.8621%" height="15" fill="rgb(235,212,8)" fg:x="5879" fg:w="1208"/><text x="82.3131%" y="175.50">libsystem_platform.dylib`_..</text></g><g><title>libsystem_malloc.dylib`_szone_free (9 samples, 0.13%)</title><rect x="98.9252%" y="181" width="0.1256%" height="15" fill="rgb(223,33,50)" fg:x="7087" fg:w="9"/><text x="99.1752%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="99.2323%" y="165" width="0.0140%" height="15" fill="rgb(219,149,13)" fg:x="7109" fg:w="1"/><text x="99.4823%" y="175.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_legal_moves (6,458 samples, 90.15%)</title><rect x="9.1150%" y="197" width="90.1452%" height="15" fill="rgb(250,156,29)" fg:x="653" fg:w="6458"/><text x="9.3650%" y="207.50">chess_engine-0109c01217117341`chess_engine::chess_move::generate_legal_moves</text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.21%)</title><rect x="99.0508%" y="181" width="0.2094%" height="15" fill="rgb(216,193,19)" fg:x="7096" fg:w="15"/><text x="99.3008%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="99.2462%" y="165" width="0.0140%" height="15" fill="rgb(216,135,14)" fg:x="7110" fg:w="1"/><text x="99.4962%" y="175.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::generate_moves (16 samples, 0.22%)</title><rect x="99.2602%" y="197" width="0.2233%" height="15" fill="rgb(241,47,5)" fg:x="7111" fg:w="16"/><text x="99.5102%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.11%)</title><rect x="99.4835%" y="197" width="0.1117%" height="15" fill="rgb(233,42,35)" fg:x="7127" fg:w="8"/><text x="99.7335%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.08%)</title><rect x="99.5952%" y="197" width="0.0838%" height="15" fill="rgb(231,13,6)" fg:x="7135" fg:w="6"/><text x="99.8452%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.13%)</title><rect x="99.6790%" y="197" width="0.1256%" height="15" fill="rgb(207,181,40)" fg:x="7141" fg:w="9"/><text x="99.9290%" y="207.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::perft::perft (6,565 samples, 91.64%)</title><rect x="8.2915%" y="213" width="91.6387%" height="15" fill="rgb(254,173,49)" fg:x="594" fg:w="6565"/><text x="8.5415%" y="223.50">chess_engine-0109c01217117341`chess_engine::perft::perft</text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.13%)</title><rect x="99.8046%" y="197" width="0.1256%" height="15" fill="rgb(221,1,38)" fg:x="7150" fg:w="9"/><text x="100.0546%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.03%)</title><rect x="99.9023%" y="181" width="0.0279%" height="15" fill="rgb(206,124,46)" fg:x="7157" fg:w="2"/><text x="100.1523%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.04%)</title><rect x="99.9302%" y="213" width="0.0419%" height="15" fill="rgb(249,21,11)" fg:x="7159" fg:w="3"/><text x="100.1802%" y="223.50"></text></g><g><title>chess_engine-0109c01217117341`chess_engine::perft::perft (7,128 samples, 99.50%)</title><rect x="0.4886%" y="229" width="99.4975%" height="15" fill="rgb(222,201,40)" fg:x="35" fg:w="7128"/><text x="0.7386%" y="239.50">chess_engine-0109c01217117341`chess_engine::perft::perft</text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="99.9721%" y="213" width="0.0140%" height="15" fill="rgb(235,61,29)" fg:x="7162" fg:w="1"/><text x="100.2221%" y="223.50"></text></g><g><title>all (7,164 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="7164"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (7,163 samples, 99.99%)</title><rect x="0.0140%" y="421" width="99.9860%" height="15" fill="rgb(222,56,46)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="431.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (7,163 samples, 99.99%)</title><rect x="0.0140%" y="405" width="99.9860%" height="15" fill="rgb(239,76,54)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="415.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>chess_engine-0109c01217117341`std::sys::unix::thread::Thread::new::thread_start (7,163 samples, 99.99%)</title><rect x="0.0140%" y="389" width="99.9860%" height="15" fill="rgb(231,124,27)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="399.50">chess_engine-0109c01217117341`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>chess_engine-0109c01217117341`core::ops::function::FnOnce::call_once{{vtable.shim}} (7,163 samples, 99.99%)</title><rect x="0.0140%" y="373" width="99.9860%" height="15" fill="rgb(249,195,6)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="383.50">chess_engine-0109c01217117341`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>chess_engine-0109c01217117341`std::sys_common::backtrace::__rust_begin_short_backtrace (7,163 samples, 99.99%)</title><rect x="0.0140%" y="357" width="99.9860%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="367.50">chess_engine-0109c01217117341`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>chess_engine-0109c01217117341`test::run_test::run_test_inner::_{{closure}} (7,163 samples, 99.99%)</title><rect x="0.0140%" y="341" width="99.9860%" height="15" fill="rgb(206,201,31)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="351.50">chess_engine-0109c01217117341`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>chess_engine-0109c01217117341`test::__rust_begin_short_backtrace (7,163 samples, 99.99%)</title><rect x="0.0140%" y="325" width="99.9860%" height="15" fill="rgb(231,57,52)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="335.50">chess_engine-0109c01217117341`test::__rust_begin_short_backtrace</text></g><g><title>chess_engine-0109c01217117341`core::ops::function::FnOnce::call_once (7,163 samples, 99.99%)</title><rect x="0.0140%" y="309" width="99.9860%" height="15" fill="rgb(248,177,22)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="319.50">chess_engine-0109c01217117341`core::ops::function::FnOnce::call_once</text></g><g><title>chess_engine-0109c01217117341`chess_engine::chess_move::tests::test_stock_perft (7,163 samples, 99.99%)</title><rect x="0.0140%" y="293" width="99.9860%" height="15" fill="rgb(215,211,37)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="303.50">chess_engine-0109c01217117341`chess_engine::chess_move::tests::test_stock_perft</text></g><g><title>chess_engine-0109c01217117341`chess_engine::perft::perft (7,163 samples, 99.99%)</title><rect x="0.0140%" y="277" width="99.9860%" height="15" fill="rgb(241,128,51)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="287.50">chess_engine-0109c01217117341`chess_engine::perft::perft</text></g><g><title>chess_engine-0109c01217117341`chess_engine::perft::perft (7,163 samples, 99.99%)</title><rect x="0.0140%" y="261" width="99.9860%" height="15" fill="rgb(227,165,31)" fg:x="1" fg:w="7163"/><text x="0.2640%" y="271.50">chess_engine-0109c01217117341`chess_engine::perft::perft</text></g><g><title>chess_engine-0109c01217117341`chess_engine::perft::perft (7,160 samples, 99.94%)</title><rect x="0.0558%" y="245" width="99.9442%" height="15" fill="rgb(228,167,24)" fg:x="4" fg:w="7160"/><text x="0.3058%" y="255.50">chess_engine-0109c01217117341`chess_engine::perft::perft</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="99.9860%" y="229" width="0.0140%" height="15" fill="rgb(228,143,12)" fg:x="7163" fg:w="1"/><text x="100.2360%" y="239.50"></text></g></svg></svg>