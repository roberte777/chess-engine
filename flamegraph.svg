<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="430"><g><title>engine`engine::ask_for_piece (1 samples, 0.23%)</title><rect x="0.0000%" y="293" width="0.2326%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>engine`core::ptr::drop_in_place&lt;&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt; as core::convert::From&lt;alloc::string::String&gt;&gt;::from::StringError&gt; (1 samples, 0.23%)</title><rect x="0.0000%" y="277" width="0.2326%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_legal_moves (1 samples, 0.23%)</title><rect x="0.2326%" y="245" width="0.2326%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.4826%" y="255.50"></text></g><g><title>engine`chess::board::Board::make_move (1 samples, 0.23%)</title><rect x="0.2326%" y="229" width="0.2326%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.4826%" y="239.50"></text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.23%)</title><rect x="0.4651%" y="197" width="0.2326%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.7151%" y="207.50"></text></g><g><title>engine`alloc::raw_vec::finish_grow (1 samples, 0.23%)</title><rect x="0.4651%" y="181" width="0.2326%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.7151%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.23%)</title><rect x="0.4651%" y="165" width="0.2326%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.7151%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.23%)</title><rect x="0.4651%" y="149" width="0.2326%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.7151%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.23%)</title><rect x="0.4651%" y="133" width="0.2326%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.7151%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.23%)</title><rect x="0.4651%" y="117" width="0.2326%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.7151%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.23%)</title><rect x="0.4651%" y="101" width="0.2326%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.7151%" y="111.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_legal_moves (2 samples, 0.47%)</title><rect x="0.4651%" y="229" width="0.4651%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="2"/><text x="0.7151%" y="239.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_moves_for_color (2 samples, 0.47%)</title><rect x="0.4651%" y="213" width="0.4651%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="2"/><text x="0.7151%" y="223.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_pawn_move_list (1 samples, 0.23%)</title><rect x="0.6977%" y="197" width="0.2326%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.9477%" y="207.50"></text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.23%)</title><rect x="0.6977%" y="181" width="0.2326%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.9477%" y="191.50"></text></g><g><title>engine`alloc::raw_vec::finish_grow (1 samples, 0.23%)</title><rect x="0.6977%" y="165" width="0.2326%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.9477%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.23%)</title><rect x="0.6977%" y="149" width="0.2326%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.9477%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.23%)</title><rect x="0.6977%" y="133" width="0.2326%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.9477%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.23%)</title><rect x="0.6977%" y="117" width="0.2326%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.9477%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.23%)</title><rect x="0.6977%" y="101" width="0.2326%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.9477%" y="111.50"></text></g><g><title>engine`core::slice::sort::merge_sort (1 samples, 0.23%)</title><rect x="0.9302%" y="229" width="0.2326%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="1.1802%" y="239.50"></text></g><g><title>engine`DYLD-STUB$$free (1 samples, 0.23%)</title><rect x="1.8605%" y="213" width="0.2326%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="2.1105%" y="223.50"></text></g><g><title>engine`chess::board::Board::is_square_attacked (8 samples, 1.86%)</title><rect x="2.0930%" y="213" width="1.8605%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="8"/><text x="2.3430%" y="223.50">e..</text></g><g><title>engine`chess::board::Board::make_move (5 samples, 1.16%)</title><rect x="3.9535%" y="213" width="1.1628%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="5"/><text x="4.2035%" y="223.50"></text></g><g><title>engine`chess::board::Board::unmake (2 samples, 0.47%)</title><rect x="5.1163%" y="213" width="0.4651%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="2"/><text x="5.3663%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.23%)</title><rect x="6.0465%" y="133" width="0.2326%" height="15" fill="rgb(249,31,29)" fg:x="26" fg:w="1"/><text x="6.2965%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.47%)</title><rect x="6.2791%" y="133" width="0.4651%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="2"/><text x="6.5291%" y="143.50"></text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 1.40%)</title><rect x="5.5814%" y="197" width="1.3953%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="6"/><text x="5.8314%" y="207.50"></text></g><g><title>engine`alloc::raw_vec::finish_grow (4 samples, 0.93%)</title><rect x="6.0465%" y="181" width="0.9302%" height="15" fill="rgb(214,148,48)" fg:x="26" fg:w="4"/><text x="6.2965%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.93%)</title><rect x="6.0465%" y="165" width="0.9302%" height="15" fill="rgb(232,36,49)" fg:x="26" fg:w="4"/><text x="6.2965%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.93%)</title><rect x="6.0465%" y="149" width="0.9302%" height="15" fill="rgb(209,103,24)" fg:x="26" fg:w="4"/><text x="6.2965%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.23%)</title><rect x="6.7442%" y="133" width="0.2326%" height="15" fill="rgb(229,88,8)" fg:x="29" fg:w="1"/><text x="6.9942%" y="143.50"></text></g><g><title>engine`chess::board::Board::make_move (5 samples, 1.16%)</title><rect x="6.9767%" y="197" width="1.1628%" height="15" fill="rgb(213,181,19)" fg:x="30" fg:w="5"/><text x="7.2267%" y="207.50"></text></g><g><title>engine`chess::board::Board::unmake (2 samples, 0.47%)</title><rect x="8.1395%" y="197" width="0.4651%" height="15" fill="rgb(254,191,54)" fg:x="35" fg:w="2"/><text x="8.3895%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="10.6977%" y="101" width="0.2326%" height="15" fill="rgb(241,83,37)" fg:x="46" fg:w="1"/><text x="10.9477%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.47%)</title><rect x="10.6977%" y="133" width="0.4651%" height="15" fill="rgb(233,36,39)" fg:x="46" fg:w="2"/><text x="10.9477%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.47%)</title><rect x="10.6977%" y="117" width="0.4651%" height="15" fill="rgb(226,3,54)" fg:x="46" fg:w="2"/><text x="10.9477%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.23%)</title><rect x="10.9302%" y="101" width="0.2326%" height="15" fill="rgb(245,192,40)" fg:x="47" fg:w="1"/><text x="11.1802%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.23%)</title><rect x="10.9302%" y="85" width="0.2326%" height="15" fill="rgb(238,167,29)" fg:x="47" fg:w="1"/><text x="11.1802%" y="95.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_moves_for_color (12 samples, 2.79%)</title><rect x="8.6047%" y="197" width="2.7907%" height="15" fill="rgb(232,182,51)" fg:x="37" fg:w="12"/><text x="8.8547%" y="207.50">en..</text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_pawn_move_list (3 samples, 0.70%)</title><rect x="10.6977%" y="181" width="0.6977%" height="15" fill="rgb(231,60,39)" fg:x="46" fg:w="3"/><text x="10.9477%" y="191.50"></text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.70%)</title><rect x="10.6977%" y="165" width="0.6977%" height="15" fill="rgb(208,69,12)" fg:x="46" fg:w="3"/><text x="10.9477%" y="175.50"></text></g><g><title>engine`alloc::raw_vec::finish_grow (3 samples, 0.70%)</title><rect x="10.6977%" y="149" width="0.6977%" height="15" fill="rgb(235,93,37)" fg:x="46" fg:w="3"/><text x="10.9477%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.23%)</title><rect x="11.1628%" y="133" width="0.2326%" height="15" fill="rgb(213,116,39)" fg:x="48" fg:w="1"/><text x="11.4128%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.23%)</title><rect x="11.3953%" y="197" width="0.2326%" height="15" fill="rgb(222,207,29)" fg:x="49" fg:w="1"/><text x="11.6453%" y="207.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_legal_moves (27 samples, 6.28%)</title><rect x="5.5814%" y="213" width="6.2791%" height="15" fill="rgb(206,96,30)" fg:x="24" fg:w="27"/><text x="5.8314%" y="223.50">engine`c..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.23%)</title><rect x="11.6279%" y="197" width="0.2326%" height="15" fill="rgb(218,138,4)" fg:x="50" fg:w="1"/><text x="11.8779%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.23%)</title><rect x="11.6279%" y="181" width="0.2326%" height="15" fill="rgb(250,191,14)" fg:x="50" fg:w="1"/><text x="11.8779%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.23%)</title><rect x="11.6279%" y="165" width="0.2326%" height="15" fill="rgb(239,60,40)" fg:x="50" fg:w="1"/><text x="11.8779%" y="175.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_moves_for_color (1 samples, 0.23%)</title><rect x="11.8605%" y="213" width="0.2326%" height="15" fill="rgb(206,27,48)" fg:x="51" fg:w="1"/><text x="12.1105%" y="223.50"></text></g><g><title>engine`core::slice::sort::merge_sort (1 samples, 0.23%)</title><rect x="12.0930%" y="213" width="0.2326%" height="15" fill="rgb(225,35,8)" fg:x="52" fg:w="1"/><text x="12.3430%" y="223.50"></text></g><g><title>engine`chess::board::Board::is_square_attacked (69 samples, 16.05%)</title><rect x="14.8837%" y="197" width="16.0465%" height="15" fill="rgb(250,213,24)" fg:x="64" fg:w="69"/><text x="15.1337%" y="207.50">engine`chess::board::Boar..</text></g><g><title>engine`chess::board::Board::make_move (25 samples, 5.81%)</title><rect x="30.9302%" y="197" width="5.8140%" height="15" fill="rgb(247,123,22)" fg:x="133" fg:w="25"/><text x="31.1802%" y="207.50">engine`..</text></g><g><title>engine`chess::board::Board::unmake (13 samples, 3.02%)</title><rect x="36.7442%" y="197" width="3.0233%" height="15" fill="rgb(231,138,38)" fg:x="158" fg:w="13"/><text x="36.9942%" y="207.50">eng..</text></g><g><title>engine`__rdl_realloc (1 samples, 0.23%)</title><rect x="42.5581%" y="165" width="0.2326%" height="15" fill="rgb(231,145,46)" fg:x="183" fg:w="1"/><text x="42.8081%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.23%)</title><rect x="43.4884%" y="117" width="0.2326%" height="15" fill="rgb(251,118,11)" fg:x="187" fg:w="1"/><text x="43.7384%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.47%)</title><rect x="43.7209%" y="117" width="0.4651%" height="15" fill="rgb(217,147,25)" fg:x="188" fg:w="2"/><text x="43.9709%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.23%)</title><rect x="44.1860%" y="117" width="0.2326%" height="15" fill="rgb(247,81,37)" fg:x="190" fg:w="1"/><text x="44.4360%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.23%)</title><rect x="44.4186%" y="101" width="0.2326%" height="15" fill="rgb(209,12,38)" fg:x="191" fg:w="1"/><text x="44.6686%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.93%)</title><rect x="44.6512%" y="101" width="0.9302%" height="15" fill="rgb(227,1,9)" fg:x="192" fg:w="4"/><text x="44.9012%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 1.40%)</title><rect x="44.4186%" y="117" width="1.3953%" height="15" fill="rgb(248,47,43)" fg:x="191" fg:w="6"/><text x="44.6686%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.23%)</title><rect x="45.5814%" y="101" width="0.2326%" height="15" fill="rgb(221,10,30)" fg:x="196" fg:w="1"/><text x="45.8314%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 2.79%)</title><rect x="43.2558%" y="149" width="2.7907%" height="15" fill="rgb(210,229,1)" fg:x="186" fg:w="12"/><text x="43.5058%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (12 samples, 2.79%)</title><rect x="43.2558%" y="133" width="2.7907%" height="15" fill="rgb(222,148,37)" fg:x="186" fg:w="12"/><text x="43.5058%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.23%)</title><rect x="45.8140%" y="117" width="0.2326%" height="15" fill="rgb(234,67,33)" fg:x="197" fg:w="1"/><text x="46.0640%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.23%)</title><rect x="45.8140%" y="101" width="0.2326%" height="15" fill="rgb(247,98,35)" fg:x="197" fg:w="1"/><text x="46.0640%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.23%)</title><rect x="45.8140%" y="85" width="0.2326%" height="15" fill="rgb(247,138,52)" fg:x="197" fg:w="1"/><text x="46.0640%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.23%)</title><rect x="45.8140%" y="69" width="0.2326%" height="15" fill="rgb(213,79,30)" fg:x="197" fg:w="1"/><text x="46.0640%" y="79.50"></text></g><g><title>engine`alloc::raw_vec::finish_grow (17 samples, 3.95%)</title><rect x="42.7907%" y="165" width="3.9535%" height="15" fill="rgb(246,177,23)" fg:x="184" fg:w="17"/><text x="43.0407%" y="175.50">engi..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.70%)</title><rect x="46.0465%" y="149" width="0.6977%" height="15" fill="rgb(230,62,27)" fg:x="198" fg:w="3"/><text x="46.2965%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.47%)</title><rect x="46.7442%" y="165" width="0.4651%" height="15" fill="rgb(216,154,8)" fg:x="201" fg:w="2"/><text x="46.9942%" y="175.50"></text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 5.35%)</title><rect x="42.0930%" y="181" width="5.3488%" height="15" fill="rgb(244,35,45)" fg:x="181" fg:w="23"/><text x="42.3430%" y="191.50">engine`..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="47.2093%" y="165" width="0.2326%" height="15" fill="rgb(251,115,12)" fg:x="203" fg:w="1"/><text x="47.4593%" y="175.50"></text></g><g><title>engine`alloc::raw_vec::finish_grow (2 samples, 0.47%)</title><rect x="47.4419%" y="181" width="0.4651%" height="15" fill="rgb(240,54,50)" fg:x="204" fg:w="2"/><text x="47.6919%" y="191.50"></text></g><g><title>engine`chess::board::Board::make_move (70 samples, 16.28%)</title><rect x="47.9070%" y="181" width="16.2791%" height="15" fill="rgb(233,84,52)" fg:x="206" fg:w="70"/><text x="48.1570%" y="191.50">engine`chess::board::Boar..</text></g><g><title>engine`chess::board::Board::unmake (39 samples, 9.07%)</title><rect x="64.1860%" y="181" width="9.0698%" height="15" fill="rgb(207,117,47)" fg:x="276" fg:w="39"/><text x="64.4360%" y="191.50">engine`chess:..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.23%)</title><rect x="79.5349%" y="101" width="0.2326%" height="15" fill="rgb(249,43,39)" fg:x="342" fg:w="1"/><text x="79.7849%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.23%)</title><rect x="79.7674%" y="85" width="0.2326%" height="15" fill="rgb(209,38,44)" fg:x="343" fg:w="1"/><text x="80.0174%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.23%)</title><rect x="80.0000%" y="69" width="0.2326%" height="15" fill="rgb(236,212,23)" fg:x="344" fg:w="1"/><text x="80.2500%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.70%)</title><rect x="80.0000%" y="85" width="0.6977%" height="15" fill="rgb(242,79,21)" fg:x="344" fg:w="3"/><text x="80.2500%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.47%)</title><rect x="80.2326%" y="69" width="0.4651%" height="15" fill="rgb(211,96,35)" fg:x="345" fg:w="2"/><text x="80.4826%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.47%)</title><rect x="80.2326%" y="53" width="0.4651%" height="15" fill="rgb(253,215,40)" fg:x="345" fg:w="2"/><text x="80.4826%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.23%)</title><rect x="80.4651%" y="37" width="0.2326%" height="15" fill="rgb(211,81,21)" fg:x="346" fg:w="1"/><text x="80.7151%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 1.40%)</title><rect x="79.7674%" y="101" width="1.3953%" height="15" fill="rgb(208,190,38)" fg:x="343" fg:w="6"/><text x="80.0174%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.47%)</title><rect x="80.6977%" y="85" width="0.4651%" height="15" fill="rgb(235,213,38)" fg:x="347" fg:w="2"/><text x="80.9477%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.23%)</title><rect x="81.1628%" y="101" width="0.2326%" height="15" fill="rgb(237,122,38)" fg:x="349" fg:w="1"/><text x="81.4128%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (10 samples, 2.33%)</title><rect x="79.5349%" y="117" width="2.3256%" height="15" fill="rgb(244,218,35)" fg:x="342" fg:w="10"/><text x="79.7849%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.47%)</title><rect x="81.3953%" y="101" width="0.4651%" height="15" fill="rgb(240,68,47)" fg:x="350" fg:w="2"/><text x="81.6453%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.23%)</title><rect x="81.6279%" y="85" width="0.2326%" height="15" fill="rgb(210,16,53)" fg:x="351" fg:w="1"/><text x="81.8779%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 2.79%)</title><rect x="79.5349%" y="133" width="2.7907%" height="15" fill="rgb(235,124,12)" fg:x="342" fg:w="12"/><text x="79.7849%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.47%)</title><rect x="81.8605%" y="117" width="0.4651%" height="15" fill="rgb(224,169,11)" fg:x="352" fg:w="2"/><text x="82.1105%" y="127.50"></text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 3.26%)</title><rect x="79.3023%" y="165" width="3.2558%" height="15" fill="rgb(250,166,2)" fg:x="341" fg:w="14"/><text x="79.5523%" y="175.50">eng..</text></g><g><title>engine`alloc::raw_vec::finish_grow (13 samples, 3.02%)</title><rect x="79.5349%" y="149" width="3.0233%" height="15" fill="rgb(242,216,29)" fg:x="342" fg:w="13"/><text x="79.7849%" y="159.50">eng..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.23%)</title><rect x="82.3256%" y="133" width="0.2326%" height="15" fill="rgb(230,116,27)" fg:x="354" fg:w="1"/><text x="82.5756%" y="143.50"></text></g><g><title>engine`__rdl_realloc (1 samples, 0.23%)</title><rect x="84.1860%" y="133" width="0.2326%" height="15" fill="rgb(228,99,48)" fg:x="362" fg:w="1"/><text x="84.4360%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.47%)</title><rect x="85.1163%" y="85" width="0.4651%" height="15" fill="rgb(253,11,6)" fg:x="366" fg:w="2"/><text x="85.3663%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.70%)</title><rect x="85.5814%" y="85" width="0.6977%" height="15" fill="rgb(247,143,39)" fg:x="368" fg:w="3"/><text x="85.8314%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.47%)</title><rect x="86.2791%" y="85" width="0.4651%" height="15" fill="rgb(236,97,10)" fg:x="371" fg:w="2"/><text x="86.5291%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.23%)</title><rect x="86.5116%" y="69" width="0.2326%" height="15" fill="rgb(233,208,19)" fg:x="372" fg:w="1"/><text x="86.7616%" y="79.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_moves_for_color (59 samples, 13.72%)</title><rect x="73.2558%" y="181" width="13.7209%" height="15" fill="rgb(216,164,2)" fg:x="315" fg:w="59"/><text x="73.5058%" y="191.50">engine`chess::move_ge..</text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_pawn_move_list (19 samples, 4.42%)</title><rect x="82.5581%" y="165" width="4.4186%" height="15" fill="rgb(220,129,5)" fg:x="355" fg:w="19"/><text x="82.8081%" y="175.50">engin..</text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 2.79%)</title><rect x="84.1860%" y="149" width="2.7907%" height="15" fill="rgb(242,17,10)" fg:x="362" fg:w="12"/><text x="84.4360%" y="159.50">en..</text></g><g><title>engine`alloc::raw_vec::finish_grow (11 samples, 2.56%)</title><rect x="84.4186%" y="133" width="2.5581%" height="15" fill="rgb(242,107,0)" fg:x="363" fg:w="11"/><text x="84.6686%" y="143.50">en..</text></g><g><title>libsystem_malloc.dylib`_realloc (10 samples, 2.33%)</title><rect x="84.6512%" y="117" width="2.3256%" height="15" fill="rgb(251,28,31)" fg:x="364" fg:w="10"/><text x="84.9012%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (10 samples, 2.33%)</title><rect x="84.6512%" y="101" width="2.3256%" height="15" fill="rgb(233,223,10)" fg:x="364" fg:w="10"/><text x="84.9012%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.23%)</title><rect x="86.7442%" y="85" width="0.2326%" height="15" fill="rgb(215,21,27)" fg:x="373" fg:w="1"/><text x="86.9942%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.23%)</title><rect x="86.9767%" y="181" width="0.2326%" height="15" fill="rgb(232,23,21)" fg:x="374" fg:w="1"/><text x="87.2267%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.23%)</title><rect x="86.9767%" y="165" width="0.2326%" height="15" fill="rgb(244,5,23)" fg:x="374" fg:w="1"/><text x="87.2267%" y="175.50"></text></g><g><title>engine`chess::move_generator::MoveGenerator::generate_legal_moves (205 samples, 47.67%)</title><rect x="39.7674%" y="197" width="47.6744%" height="15" fill="rgb(226,81,46)" fg:x="171" fg:w="205"/><text x="40.0174%" y="207.50">engine`chess::move_generator::MoveGenerator::generate_legal_moves</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.23%)</title><rect x="87.2093%" y="181" width="0.2326%" height="15" fill="rgb(247,70,30)" fg:x="375" fg:w="1"/><text x="87.4593%" y="191.50"></text></g><g><title>engine`core::slice::sort::insertion_sort_shift_left (1 samples, 0.23%)</title><rect x="91.6279%" y="181" width="0.2326%" height="15" fill="rgb(212,68,19)" fg:x="394" fg:w="1"/><text x="91.8779%" y="191.50"></text></g><g><title>engine`core::slice::sort::merge_sort (20 samples, 4.65%)</title><rect x="87.4419%" y="197" width="4.6512%" height="15" fill="rgb(240,187,13)" fg:x="376" fg:w="20"/><text x="87.6919%" y="207.50">engin..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.23%)</title><rect x="91.8605%" y="181" width="0.2326%" height="15" fill="rgb(223,113,26)" fg:x="395" fg:w="1"/><text x="92.1105%" y="191.50"></text></g><g><title>engine`rusty_rook::score::score (25 samples, 5.81%)</title><rect x="92.0930%" y="197" width="5.8140%" height="15" fill="rgb(206,192,2)" fg:x="396" fg:w="25"/><text x="92.3430%" y="207.50">engine`..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.23%)</title><rect x="97.9070%" y="197" width="0.2326%" height="15" fill="rgb(241,108,4)" fg:x="421" fg:w="1"/><text x="98.1570%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.23%)</title><rect x="98.1395%" y="197" width="0.2326%" height="15" fill="rgb(247,173,49)" fg:x="422" fg:w="1"/><text x="98.3895%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.23%)</title><rect x="98.3721%" y="197" width="0.2326%" height="15" fill="rgb(224,114,35)" fg:x="423" fg:w="1"/><text x="98.6221%" y="207.50"></text></g><g><title>engine`rusty_rook::score::minimax_ab (372 samples, 86.51%)</title><rect x="12.3256%" y="213" width="86.5116%" height="15" fill="rgb(245,159,27)" fg:x="53" fg:w="372"/><text x="12.5756%" y="223.50">engine`rusty_rook::score::minimax_ab</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.23%)</title><rect x="98.6047%" y="197" width="0.2326%" height="15" fill="rgb(245,172,44)" fg:x="424" fg:w="1"/><text x="98.8547%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.47%)</title><rect x="98.8372%" y="213" width="0.4651%" height="15" fill="rgb(236,23,11)" fg:x="425" fg:w="2"/><text x="99.0872%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.23%)</title><rect x="99.3023%" y="213" width="0.2326%" height="15" fill="rgb(205,117,38)" fg:x="427" fg:w="1"/><text x="99.5523%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.23%)</title><rect x="99.5349%" y="213" width="0.2326%" height="15" fill="rgb(237,72,25)" fg:x="428" fg:w="1"/><text x="99.7849%" y="223.50"></text></g><g><title>all (430 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="430"/><text x="0.2500%" y="415.50"></text></g><g><title>dyld`start (430 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="430"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>engine`main (430 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="430"/><text x="0.2500%" y="383.50">engine`main</text></g><g><title>engine`std::rt::lang_start_internal (430 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="430"/><text x="0.2500%" y="367.50">engine`std::rt::lang_start_internal</text></g><g><title>engine`std::rt::lang_start::_{{closure}} (430 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="430"/><text x="0.2500%" y="351.50">engine`std::rt::lang_start::_{{closure}}</text></g><g><title>engine`std::sys_common::backtrace::__rust_begin_short_backtrace (430 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="430"/><text x="0.2500%" y="335.50">engine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>engine`engine::main (430 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="430"/><text x="0.2500%" y="319.50">engine`engine::main</text></g><g><title>engine`rusty_rook::score::minimax_ab (429 samples, 99.77%)</title><rect x="0.2326%" y="293" width="99.7674%" height="15" fill="rgb(245,182,24)" fg:x="1" fg:w="429"/><text x="0.4826%" y="303.50">engine`rusty_rook::score::minimax_ab</text></g><g><title>engine`rusty_rook::score::minimax_ab (429 samples, 99.77%)</title><rect x="0.2326%" y="277" width="99.7674%" height="15" fill="rgb(242,14,37)" fg:x="1" fg:w="429"/><text x="0.4826%" y="287.50">engine`rusty_rook::score::minimax_ab</text></g><g><title>engine`rusty_rook::score::minimax_ab (429 samples, 99.77%)</title><rect x="0.2326%" y="261" width="99.7674%" height="15" fill="rgb(246,228,12)" fg:x="1" fg:w="429"/><text x="0.4826%" y="271.50">engine`rusty_rook::score::minimax_ab</text></g><g><title>engine`rusty_rook::score::minimax_ab (428 samples, 99.53%)</title><rect x="0.4651%" y="245" width="99.5349%" height="15" fill="rgb(213,55,15)" fg:x="2" fg:w="428"/><text x="0.7151%" y="255.50">engine`rusty_rook::score::minimax_ab</text></g><g><title>engine`rusty_rook::score::minimax_ab (425 samples, 98.84%)</title><rect x="1.1628%" y="229" width="98.8372%" height="15" fill="rgb(209,9,3)" fg:x="5" fg:w="425"/><text x="1.4128%" y="239.50">engine`rusty_rook::score::minimax_ab</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="99.7674%" y="213" width="0.2326%" height="15" fill="rgb(230,59,30)" fg:x="429" fg:w="1"/><text x="100.0174%" y="223.50"></text></g></svg></svg>